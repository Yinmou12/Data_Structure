#ifndef __STACK_H__
#define __STACK_H__

#include <iostream>
#include <string.h>
using namespace std;
// --------------- 顺序栈 ---------------
// 缺点：栈的大小不可改变
#define MAXSIZE 50
typedef char ElemType;
typedef struct SqStack
{
    ElemType data[MAXSIZE];
    int top;
} SqStack;

// 初始化栈
void InitSqStack(SqStack &S);
// 判断栈空
bool StackEmpty(SqStack S);
// 入栈
bool Push(SqStack &S, ElemType e);
// 出栈
bool Pop(SqStack &S, ElemType &e);
// 读取栈顶元素
bool GetTopElem(SqStack S, ElemType &e);

// --------------- 共享栈 ---------------
// 两个栈共享同一片空间
typedef struct ShStack
{
    ElemType data[MAXSIZE]; // 静态数组存放栈中元素
    int top0;               // 0号栈栈顶指针
    int top1;               // 1号栈栈顶指针
} ShStack;

// 初始化栈
void InitShStack(ShStack &S);
// 判断栈空
bool ShStackEmpty(ShStack S);
// 入栈
bool ShStackPush(ShStack &S, ElemType e);
// 出栈
bool ShStackPop(ShStack &S, ElemType &e);
// 读取栈顶元素
bool ShStackGetTop(ShStack S, ElemType &e);

// --------------- 链栈 ---------------
// 以下实现的是  不带头结点  链栈
typedef struct Node
{
    ElemType data;
    struct Node *next;
} StackNode, *LinkStack;

// 初始化栈
bool InitLinkStack(LinkStack &S);
// 判断栈空
bool LinkStackEmpty(LinkStack S);
// 入栈
bool LinkStackPush(LinkStack &S, ElemType e);
// 出栈
bool LinkStackPop(LinkStack &S, ElemType &e);
// 读取栈顶元素
bool LinkStackGetTop(LinkStack S, ElemType &e);
// 打印
bool PrintLinkStack(LinkStack S);
// Test
void TestLinkStack();

// --------------- 括号匹配问题 ---------------
int MatchBracket(char arr[], int length);
void TestMatchBracket();

// --------------- 表达式求值问题 --------------- 
// 中缀表达式转后缀表达式
char *MidToLast(char source[], int source_len);
void TestMideToLast();
int Caculate();

#endif
