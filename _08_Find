// -------------------------- Find.h --------------------------

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
using namespace std;

typedef int ElemType;
// ----------------- 顺序查找 -----------------
typedef struct
{
    ElemType *data; // 动态数组基址
    int TabLen;     // 表的长度
} SSTable;
int Search_Seq(SSTable ST, ElemType key);

// ----------------- 折半查找 -----------------
int Binary_Search(SSTable L, ElemType key);

// ----------------- 二叉排序树的查找 -----------------
typedef struct BSTNode
{
    int key;
    struct BSTNode *lchild, *rchild;
} BSTNode, *BSTree;
// 查找
BSTNode *BST_Search(BSTree T, int key);
// 插入
int BST_Insert(BSTree &T, int k);
// 构造二叉排序树
void Create_BSTree(BSTree &T, int str[], int n);
// 中序遍历二叉排序树
void Mid_BSTree(BSTree T);
// Test
void Test_BSTree();
// 二叉排序树的删除
int Delete_BSTNode(BSTree &T,int k);
// 使用直接后继替代要删除的结点
int Find_NextNode(BSTree &T,BSTNode *current,BSTNode *node);
// 使用直接前驱替代要删除的结点
int Find_PreNode(BSTree &T,BSTNode *current,BSTNode *node);
// 不同情况的处理
int Dispose(BSTree &T,BSTNode *p,BSTNode *pre);
// Test_Delete
void Test_Delete();




// -------------------------- Find.cpp --------------------------
#include "./header/Find.h"

// ----------------- 顺序查找 -----------------
int Search_Seq(SSTable ST, ElemType key)
{
    // 1
    // int i = 0;
    // for (i = 0; i < ST.TabLen && ST.data[i] != key; i++)
    //     ;
    // return i == ST.TabLen ? -1 : i;

    // 2
    ST.data[0] = key;
    int i = 0;
    for (i = ST.TabLen; ST.data[i] != key; --i)
        ; // 从后往前找
    return i;
}

// ----------------- 折半查找 -----------------
int Binary_Search(SSTable L, ElemType key)
{
    int low = 0, high = L.TabLen;
    int mid = 0;
    while (low <= high)
    {
        mid = (low + high) / 2;
        if (L.data[mid] == key)
            return mid;
        else if (L.data[mid] > key)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}

// ----------------- 二叉排序树 -----------------
// 查找
BSTNode *BST_Search(BSTree T, int key)
{
    while (T != NULL && T->key != key)
    {
        if (key < T->key)
            T = T->lchild;
        else
            T = T->rchild;
    }
    return T;
}

// 插入
int BST_Insert(BSTree &T, int k)
{
    // 递归实现
    // if (T == NULL)
    // {
    //     T = (BSTNode *)malloc(sizeof(BSTNode));
    //     T->key = k;
    //     T->lchild = NULL;
    //     T->rchild = NULL;
    //     return 1;
    // }
    // else if (k == T->key)
    //     return 0;
    // else if (k < T->key)
    //     return BST_Insert(T->lchild, k);
    // else if (k > T->key)
    //     return BST_Insert(T->rchild, k);
    // return 0;

    // 非递归实现
    if (T == NULL)
    {
        T = (BSTNode *)malloc(sizeof(BSTNode));
        T->key = k;
        T->lchild = NULL;
        T->rchild = NULL;
        return 1;
    }

    BSTNode *p = (BSTNode *)malloc(sizeof(BSTNode));
    BSTNode *pre = (BSTNode *)malloc(sizeof(BSTNode));
    p = T;
    pre = NULL;
    while (p != NULL)
    {
        pre = p;
        if (k == p->key)
            return 0; // 插入失败
        if (k < p->key)
            p = p->lchild;
        else
            p = p->rchild;
    }
    p = (BSTNode *)malloc(sizeof(BSTNode));
    p->key = k;
    p->lchild = NULL;
    p->rchild = NULL;
    if (k < pre->key)
        pre->lchild = p;
    else
        pre->rchild = p;
    return 1;
}

// 构造二叉排序树
void Create_BSTree(BSTree &T, int str[], int n)
{
    T = NULL;
    int i = 0;
    while (i < n)
    {
        BST_Insert(T, str[i]);
        i++;
    }
}

// 中序遍历二叉排序树
void Mid_BSTree(BSTree T)
{
    if (T != NULL)
    {
        Mid_BSTree(T->lchild);
        cout << T->key << " ";
        Mid_BSTree(T->rchild);
    }
}

// Test
void Test_BSTree()
{
    int str[] = {50, 66, 60, 26, 21, 30, 70, 68};
    int len = sizeof(str) / sizeof(str[0]);
    BSTree T = new BSTNode;
    T = NULL;
    Create_BSTree(T, str, len);
    Mid_BSTree(T);
}

// 二叉排序树的删除
int Delete_BSTNode(BSTree &T, int k)
{
    BSTNode *pre = (BSTNode *)malloc(sizeof(BSTNode));
    BSTNode *p = (BSTNode *)malloc(sizeof(BSTNode));
    pre = NULL;
    p = T;
    while (p != NULL && k != p->key)
    {
        pre = p;
        if (k < p->key)
            p = p->lchild;
        else
            p = p->rchild;
    }
    if (p->lchild != NULL && p->rchild != NULL)
    {
        // 既有左子树 又有 右子树
        // 可用该结点的直接前驱 或 直接后继替代该结点
        // 之后则转变为第一、第二种情况
        Find_NextNode(T, p, p->rchild);
        // Find_PreNode(T, p, p->lchild);
    }
    else
        Dispose(T, p, pre);
    return 1;
}

// 使用直接后继替代要删除的结点
int Find_NextNode(BSTree &T, BSTNode *current, BSTNode *node)
{
    // T为树的根结点
    // current 为要查找直接后继的结点
    // node 记录直接后继
    BSTNode *pre = (BSTNode *)malloc(sizeof(BSTNode));
    pre = NULL;
    // pre 用于记录直接后继的前驱结点
    while (node->lchild != NULL)
    {
        pre = node;
        node = node->lchild;
    }
    current->key = node->key;
    Dispose(T, node, pre);
    return 0;
}

// 使用直接前驱替代要删除的结点
int Find_PreNode(BSTree &T, BSTNode *current, BSTNode *node)
{
    // T为树的根结点
    // current 为要查找直接前驱的结点
    // node 记录直接前驱
    BSTNode *pre = (BSTNode *)malloc(sizeof(BSTNode));
    pre = NULL;
    // pre 用于记录直接前驱的前驱结点
    while (node->rchild != NULL)
    {
        pre = node;
        node = node->rchild;
    }
    current->key = node->key;
    Dispose(T, node, pre);
    return 0;
}

int Dispose(BSTree &T, BSTNode *p, BSTNode *pre)
{
    // T 为二叉排序树的根结点
    // p 为要处理的结点
    // pre为 p 的前驱结点
    if (p->lchild == NULL && p->rchild == NULL)
    {
        // 1、叶子结点直接删除，不会破坏排序二叉树的性质
        if (pre->lchild == p)
            pre->lchild = NULL;
        else if (pre->rchild == p)
            pre->rchild = NULL;
        free(p);
        return 1;
    }
    else if (p->lchild != NULL && p->rchild == NULL)
    {
        // 2、只有左子树
        pre->lchild = p->lchild;
        p->lchild = NULL;
        free(p);
        return 1;
    }
    else if (p->lchild == NULL && p->rchild != NULL)
    {
        // 2、p结点只有右子树
        // 查找直接后继的情况 p 为 pre 的左孩子
        if (pre->lchild == p)
        {
            pre->lchild = p->rchild;
            p->rchild = NULL;
        }
        // 查找直接前驱的情况 p 为 pre 的右孩子
        else if (pre->rchild == p)
        {
            pre->rchild = p->lchild;
            p->lchild = NULL;
        }
        free(p);
        return 1;
    }
    return 0;
}

// Test_Delete
void Test_Delete()
{
    int str[] = {19, 13, 11, 8, 50, 26, 21, 30, 66, 60, 63, 61, 65, 70};
    int len = sizeof(str) / sizeof(str[0]);
    BSTree T = new BSTNode;
    T = NULL;
    Create_BSTree(T, str, len);
    Mid_BSTree(T);
    cout << endl;
    Delete_BSTNode(T, 50);
    Mid_BSTree(T);
    cout << endl;
}



// -------------------------- Main.cpp --------------------------
#include "./header/Find.h"

int main()
{
    // Test_BSTree();
    // Test_Delete();
    return 0;
}
